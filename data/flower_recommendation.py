{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import json\n",
    "import re\n",
    "\n",
    "from transformers import BertModel, BertTokenizer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.metrics.pairwise import cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>꽃</th>\n",
       "      <th>월</th>\n",
       "      <th>계절</th>\n",
       "      <th>꽃말</th>\n",
       "      <th>설명</th>\n",
       "      <th>설명2</th>\n",
       "      <th>설명_벡터</th>\n",
       "      <th>원핫인코딩</th>\n",
       "      <th>최종_벡터</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>각시붓꽃</td>\n",
       "      <td>3</td>\n",
       "      <td>봄</td>\n",
       "      <td>부끄러움, 세련됨</td>\n",
       "      <td>부끄러움 세련됨. 보라. 각시라 하면 이제 막 시집 온 새색시를 연상케 한다. 그래...</td>\n",
       "      <td>[CLS] 부끄러움 세련됨 [SEP] [CLS] 보라 [SEP] [CLS] 각시라 ...</td>\n",
       "      <td>[[0.04113124683499336, 0.11827859282493591, -0...</td>\n",
       "      <td>[[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1....</td>\n",
       "      <td>[[0.04113124683499336, 0.11827859282493591, -0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>감국</td>\n",
       "      <td>10</td>\n",
       "      <td>가을</td>\n",
       "      <td>그윽한 향기</td>\n",
       "      <td>그윽한 향기. 노랑. 가을 산야는 국화과 식물들 차지다. 특히 노란 꽃으로 향기까지...</td>\n",
       "      <td>[CLS] 그윽한 향기 [SEP] [CLS] 노랑 [SEP] [CLS] 가을 산야는...</td>\n",
       "      <td>[[0.06626041233539581, 0.14091618359088898, -0...</td>\n",
       "      <td>[[0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0....</td>\n",
       "      <td>[[0.06626041233539581, 0.14091618359088898, -0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>개나리</td>\n",
       "      <td>3</td>\n",
       "      <td>봄</td>\n",
       "      <td>희망,깊은 정, 달성</td>\n",
       "      <td>희망깊은 정 달성. 노랑. 우리나라 전역에서 봄 소식을 가장 먼저 알려주는 대표적인...</td>\n",
       "      <td>[CLS] 희망깊은 정 달성 [SEP] [CLS] 노랑 [SEP] [CLS] 우리나...</td>\n",
       "      <td>[[0.12369333207607269, 0.1469401866197586, -0....</td>\n",
       "      <td>[[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1....</td>\n",
       "      <td>[[0.12369333207607269, 0.1469401866197586, -0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>개나리</td>\n",
       "      <td>4</td>\n",
       "      <td>봄</td>\n",
       "      <td>희망</td>\n",
       "      <td>희망. 노랑. 개나리 봄을 알리는 전령사 하면 가장 먼저 떠오르는 꽃이다. 나리나리...</td>\n",
       "      <td>[CLS] 희망 [SEP] [CLS] 노랑 [SEP] [CLS] 개나리 봄을 알리는...</td>\n",
       "      <td>[[0.07213923335075378, 0.13994745910167694, -0...</td>\n",
       "      <td>[[0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1....</td>\n",
       "      <td>[[0.07213923335075378, 0.13994745910167694, -0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>갯개미취</td>\n",
       "      <td>9</td>\n",
       "      <td>가을</td>\n",
       "      <td>추억</td>\n",
       "      <td>추억. 보라. 옛날 일 따위는 깨끗이 잊는 사람들이 많은 가운데서도 당신은 옛 일을...</td>\n",
       "      <td>[CLS] 추억 [SEP] [CLS] 보라 [SEP] [CLS] 옛날 일 따위는 깨...</td>\n",
       "      <td>[[0.23332802951335907, 0.04906110465526581, -0...</td>\n",
       "      <td>[[0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 1. 0. 0....</td>\n",
       "      <td>[[0.23332802951335907, 0.04906110465526581, -0...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      꽃   월  계절           꽃말  \\\n",
       "0  각시붓꽃   3   봄    부끄러움, 세련됨   \n",
       "1    감국  10  가을       그윽한 향기   \n",
       "2   개나리   3   봄  희망,깊은 정, 달성   \n",
       "3   개나리   4   봄           희망   \n",
       "4  갯개미취   9  가을           추억   \n",
       "\n",
       "                                                  설명  \\\n",
       "0  부끄러움 세련됨. 보라. 각시라 하면 이제 막 시집 온 새색시를 연상케 한다. 그래...   \n",
       "1  그윽한 향기. 노랑. 가을 산야는 국화과 식물들 차지다. 특히 노란 꽃으로 향기까지...   \n",
       "2  희망깊은 정 달성. 노랑. 우리나라 전역에서 봄 소식을 가장 먼저 알려주는 대표적인...   \n",
       "3  희망. 노랑. 개나리 봄을 알리는 전령사 하면 가장 먼저 떠오르는 꽃이다. 나리나리...   \n",
       "4  추억. 보라. 옛날 일 따위는 깨끗이 잊는 사람들이 많은 가운데서도 당신은 옛 일을...   \n",
       "\n",
       "                                                 설명2  \\\n",
       "0  [CLS] 부끄러움 세련됨 [SEP] [CLS] 보라 [SEP] [CLS] 각시라 ...   \n",
       "1  [CLS] 그윽한 향기 [SEP] [CLS] 노랑 [SEP] [CLS] 가을 산야는...   \n",
       "2  [CLS] 희망깊은 정 달성 [SEP] [CLS] 노랑 [SEP] [CLS] 우리나...   \n",
       "3  [CLS] 희망 [SEP] [CLS] 노랑 [SEP] [CLS] 개나리 봄을 알리는...   \n",
       "4  [CLS] 추억 [SEP] [CLS] 보라 [SEP] [CLS] 옛날 일 따위는 깨...   \n",
       "\n",
       "                                               설명_벡터  \\\n",
       "0  [[0.04113124683499336, 0.11827859282493591, -0...   \n",
       "1  [[0.06626041233539581, 0.14091618359088898, -0...   \n",
       "2  [[0.12369333207607269, 0.1469401866197586, -0....   \n",
       "3  [[0.07213923335075378, 0.13994745910167694, -0...   \n",
       "4  [[0.23332802951335907, 0.04906110465526581, -0...   \n",
       "\n",
       "                                               원핫인코딩  \\\n",
       "0  [[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1....   \n",
       "1  [[0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0....   \n",
       "2  [[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1....   \n",
       "3  [[0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1....   \n",
       "4  [[0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 1. 0. 0....   \n",
       "\n",
       "                                               최종_벡터  \n",
       "0  [[0.04113124683499336, 0.11827859282493591, -0...  \n",
       "1  [[0.06626041233539581, 0.14091618359088898, -0...  \n",
       "2  [[0.12369333207607269, 0.1469401866197586, -0....  \n",
       "3  [[0.07213923335075378, 0.13994745910167694, -0...  \n",
       "4  [[0.23332802951335907, 0.04906110465526581, -0...  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nlp = pd.read_csv(\"C:/Users/pc/Model/Model-4/dataset/추천시스템_데이터.csv\")\n",
    "\n",
    "# JSON 문자열을 배열로 변환\n",
    "df_nlp['최종_벡터'] = df_nlp['최종_벡터'].apply(lambda x: np.array(json.loads(x)))\n",
    "df_nlp.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#특수문자 및 띄어쓰기 제거\n",
    "def remove_special_characters(text):\n",
    "    # 특수문자 제거\n",
    "    pattern = r'[^\\w\\s\\.]' #문자,공백문자,마침표 제외 제거\n",
    "    clean_text = re.sub(pattern, '', text)\n",
    "\n",
    "    # 한자 제거\n",
    "    pattern = r'[\\u4e00-\\u9fff]' #중국어 한자의 유니코드 시작과 끝 제거\n",
    "    clean_text = re.sub(pattern, '', clean_text)\n",
    "    clean_text = ' '.join(clean_text.split())\n",
    "    return clean_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 문장을 벡터화 변환하는 함수\n",
    "def get_sentence_embedding(text): #, tokenizer, model\n",
    "    \n",
    "    # BERT 모델과 토크나이저 불러오기\n",
    "    model_name = 'bert-base-multilingual-cased' # 다국어 전용 / 한국어 'monologg/kobert'\n",
    "    tokenizer = BertTokenizer.from_pretrained(model_name)\n",
    "    model = BertModel.from_pretrained(model_name)\n",
    "\n",
    "    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True) #최대길이 초과 시 잘라내기, 작은 경우 패딩진행\n",
    "    outputs = model(**inputs)\n",
    "    return outputs.last_hidden_state[:, 0, :].detach().numpy() #각 토큰 벡터의 첫 번째 벡터 확인 (CLS 토큰 벡터)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 사용자 입력 텍스트 분석 함수(월, 계절)\n",
    "def extract_month_season(text):\n",
    "    months = {\n",
    "        '1월': 1, '2월': 2, '3월': 3, '4월': 4, '5월': 5, '6월': 6,\n",
    "        '7월': 7, '8월': 8, '9월': 9, '10월': 10, '11월': 11, '12월': 12\n",
    "    }\n",
    "    seasons = {'봄': '봄', '여름': '여름', '가을': '가을', '겨울': '겨울'}\n",
    "    \n",
    "    month = None\n",
    "    season = None\n",
    "    \n",
    "    for key, value in months.items():\n",
    "        if key in text:\n",
    "            month = value\n",
    "            break\n",
    "    \n",
    "    for key in seasons.keys():\n",
    "        if key in text:\n",
    "            season = key\n",
    "            break\n",
    "    \n",
    "    return month, season"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#사용자 입력을 최종 벡터화 \n",
    "def get_user_input_vector(user_input):\n",
    "    input = remove_special_characters(user_input) #특수문자 제거\n",
    "    \n",
    "    # 토큰화 및 벡터화\n",
    "    input_embeddings = get_sentence_embedding(input) #(1,768) #, tokenizer, model\n",
    "    month, season = extract_month_season(user_input)\n",
    "\n",
    "    # 원핫 벡터 생성\n",
    "    encoder = OneHotEncoder()\n",
    "    encoder.fit_transform(df_nlp[['월', '계절']]).toarray()  # '월'과 '계절' 컬럼을 원핫인코딩\n",
    "\n",
    "    user_onehot_vector = np.zeros(len(encoder.get_feature_names_out(['월', '계절'])))\n",
    "    if month is not None:\n",
    "        month_idx = encoder.get_feature_names_out(['월', '계절']).tolist().index(f'월_{month}')\n",
    "        user_onehot_vector[month_idx] = 1\n",
    "    if season is not None:\n",
    "        season_idx = encoder.get_feature_names_out(['월', '계절']).tolist().index(f'계절_{season}')\n",
    "        user_onehot_vector[season_idx] = 1\n",
    "    user_onehot_vector = user_onehot_vector.reshape(1, 16) #(1,16)\n",
    "\n",
    "    #벡터 결합\n",
    "    user_vector = np.concatenate((input_embeddings, user_onehot_vector), axis=1) #(1,784)\n",
    "    return user_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 추천 시스템 함수 (코사인 유사도 기반)\n",
    "def recommend_flower(user_input, df): #, tokenizer, model\n",
    "    user_vector = get_user_input_vector(user_input) #사용자 입력을 최종 벡터화\n",
    "\n",
    "    #코사인 유사도 산출\n",
    "    df['유사도'] = df['최종_벡터'].apply(lambda x: cosine_similarity(user_vector, x)[0][0])\n",
    "    df['유사도'] = df['유사도'].astype(float) #숫자형으로 변환\n",
    "\n",
    "    # 유사도를 기준으로 상위 3개의 꽃을 선택하고 중복된 꽃을 제거\n",
    "    top3 = df.nlargest(3, '유사도').drop_duplicates(subset='꽃')\n",
    "\n",
    "    # 만약 중복 제거 후 3개의 꽃이 되지 않는 경우, 다시 nlargest로 채우기\n",
    "    if top3.shape[0] < 3:\n",
    "        additional_top = df.nlargest(20, '유사도')  # 상위 10개 정도를 선택\n",
    "        additional_top = additional_top[~additional_top['꽃'].isin(top3['꽃'])]\n",
    "        top3 = pd.concat([top3, additional_top]).nlargest(3, '유사도').drop_duplicates(subset='꽃')\n",
    "\n",
    "    return top3[['꽃', '꽃말', '유사도']]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
